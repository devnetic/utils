import test from 'ava'

import * as utils from '../src'

test('should add an ordinal suffix to a number', t => {
  t.is(utils.addOrdinalSuffix(1), '1st')
  t.is(utils.addOrdinalSuffix(2), '2nd')
  t.is(utils.addOrdinalSuffix(3), '3rd')
  t.is(utils.addOrdinalSuffix(4), '4th')
  t.is(utils.addOrdinalSuffix(5), '5th')
  t.is(utils.addOrdinalSuffix(6), '6th')
  t.is(utils.addOrdinalSuffix(7), '7th')
  t.is(utils.addOrdinalSuffix(8), '8th')
  t.is(utils.addOrdinalSuffix(9), '9th')
  t.is(utils.addOrdinalSuffix(10), '10th')
  t.is(utils.addOrdinalSuffix(11), '11th')
  t.is(utils.addOrdinalSuffix(12), '12th')
  t.is(utils.addOrdinalSuffix(13), '13th')
  t.is(utils.addOrdinalSuffix(14), '14th')
  t.is(utils.addOrdinalSuffix(15), '15th')
  t.is(utils.addOrdinalSuffix(16), '16th')
  t.is(utils.addOrdinalSuffix(17), '17th')
  t.is(utils.addOrdinalSuffix(18), '18th')
  t.is(utils.addOrdinalSuffix(19), '19th')
  t.is(utils.addOrdinalSuffix(20), '20th')
  t.is(utils.addOrdinalSuffix(21), '21st')
  t.is(utils.addOrdinalSuffix(22), '22nd')
  t.is(utils.addOrdinalSuffix(23), '23rd')
})

test('should clamp a number between a minimum and maximum', t => {
  t.is(utils.clamp(0, 1, 2), 1)
  t.is(utils.clamp(1, 1, 2), 1)
  t.is(utils.clamp(2, 1, 2), 2)
  t.is(utils.clamp(3, 1, 2), 2)
  t.is(utils.clamp(199, 10, 25), 25)
})

test('should convert decimal to binary', t => {
  t.is(utils.decimalToBinary(0), '0')
  t.is(utils.decimalToBinary(1), '1')
  t.is(utils.decimalToBinary(2), '10')
  t.is(utils.decimalToBinary(3), '11')
  t.is(utils.decimalToBinary(4), '100')
  t.is(utils.decimalToBinary(5), '101')
  t.is(utils.decimalToBinary(6), '110')
  t.is(utils.decimalToBinary(7), '111')
  t.is(utils.decimalToBinary(8), '1000')
  t.is(utils.decimalToBinary(9), '1001')
  t.is(utils.decimalToBinary(10), '1010')
  t.is(utils.decimalToBinary(11), '1011')
  t.is(utils.decimalToBinary(12), '1100')
  t.is(utils.decimalToBinary(24), '11000')
  t.is(utils.decimalToBinary(543), '1000011111')
})

test('should get the array of digits of a number', t => {
  t.deepEqual(utils.digits(0), [0])
  t.deepEqual(utils.digits(1), [1])
  t.deepEqual(utils.digits(12), [1, 2])
  t.deepEqual(utils.digits(1234), [1, 2, 3, 4])
})

test('should return the factorial of a number', t => {
  t.is(utils.factorial(0), 1)
  t.is(utils.factorial(1), 1)
  t.is(utils.factorial(2), 2)
  t.is(utils.factorial(3), 6)
  t.is(utils.factorial(4), 24)
  t.is(utils.factorial(5), 120)
})

test('should calculate fibonacci numbers', t => {
  t.is(utils.fibonacci(0), 0)
  t.is(utils.fibonacci(1), 1)
  t.is(utils.fibonacci(2), 1)
  t.is(utils.fibonacci(3), 2)
  t.is(utils.fibonacci(4), 3)
  t.is(utils.fibonacci(5), 5)
  t.is(utils.fibonacci(6), 8)
  t.is(utils.fibonacci(7), 13)
  t.is(utils.fibonacci(12), 144)
})

test('should calculate the greatest common divisor of two numbers', t => {
  t.is(utils.gcd(0, 0), 0)
  t.is(utils.gcd(0, 1), 1)
  t.is(utils.gcd(1, 0), 1)
  t.is(utils.gcd(1, 1), 1)
  t.is(utils.gcd(8, 8), 8)
  t.is(utils.gcd(9, 8), 1)
  t.is(utils.gcd(8, 9), 1)
  t.is(utils.gcd(9, 9), 9)
  t.is(utils.gcd(10, 9), 1)
  t.is(utils.gcd(10, 15), 5)
})

test('should multiply arguments', t => {
  t.is(utils.multiply(0, 0), 0)
  t.is(utils.multiply(0, 1), 0)
  t.is(utils.multiply(1, 0), 0)
  t.is(utils.multiply(1, 1), 1)
  t.is(utils.multiply(2, 2), 4)
  t.is(utils.multiply(2, 3), 6)
  t.is(utils.multiply(3, 2), 6)
  t.is(utils.multiply(3, 3), 9)
  t.is(utils.multiply(1, 2, 3, 4), 24)
  t.is(utils.multiply(1, 2, 3, 4, 5), 120)
})

test('should prefix a number with a zeros', t => {
  t.is(utils.prefixWithZeros(0, 0), '0')
  t.is(utils.prefixWithZeros(0, 1), '0')
  t.is(utils.prefixWithZeros(1, 0), '1')
  t.is(utils.prefixWithZeros(1, 1), '1')
  t.is(utils.prefixWithZeros(2, 0), '2')
  t.is(utils.prefixWithZeros(2, 1), '2')
  t.is(utils.prefixWithZeros(2, 2), '02')
  t.is(utils.prefixWithZeros(2, 3), '002')
  t.is(utils.prefixWithZeros(2, 4), '0002')
  t.is(utils.prefixWithZeros(2, 5), '00002')
  t.is(utils.prefixWithZeros(2, 6), '000002')
  t.is(utils.prefixWithZeros(2, 7), '0000002')
  t.is(utils.prefixWithZeros(2, 8), '00000002')
  t.is(utils.prefixWithZeros(2, 9), '000000002')
  t.is(utils.prefixWithZeros(2, 10), '0000000002')
  t.is(utils.prefixWithZeros(2, 11), '00000000002')
  t.is(utils.prefixWithZeros(2, 12), '000000000002')
  t.is(utils.prefixWithZeros(2, 13), '0000000000002')
  t.is(utils.prefixWithZeros(2, 14), '00000000000002')
  t.is(utils.prefixWithZeros(2, 15), '000000000000002')
  t.is(utils.prefixWithZeros(2, 16), '0000000000000002')
  t.is(utils.prefixWithZeros(2, 17), '00000000000000002')
  t.is(utils.prefixWithZeros(2, 18), '000000000000000002')
  t.is(utils.prefixWithZeros(2, 19), '0000000000000000002')
})

test('should calculate the remainder of dision of arguments', t => {
  t.is(utils.remainder(10, 3), 1)
  t.is(utils.remainder(10, 2), 0)
  t.is(utils.remainder(10, 1), 0)
  t.is(utils.remainder(1, 2, 3, 4), 1)
  t.is(utils.remainder(10, -1), 0)
  t.is(utils.remainder(10, -2), 0)
  t.is(utils.remainder(10, -3), 1)
})

test('should round a number to a given number of digits', t => {
  t.is(utils.round(1.234567), 1)
  t.is(utils.round(1.234567, 0), 1)
  t.is(utils.round(1.234567, 1), 1.2)
  t.is(utils.round(1.234567, 2), 1.23)
  t.is(utils.round(1.234567, 3), 1.235)
  t.is(utils.round(1.234567, 4), 1.2346)
})

test('should calculate the subtraction of arguments', t => {
  t.is(utils.subtract(0, 0), 0)
  t.is(utils.subtract(0, 1), -1)
  t.is(utils.subtract(1, 0), 1)
  t.is(utils.subtract(1, 1), 0)
  t.is(utils.subtract(2, 2), 0)
  t.is(utils.subtract(2, 3), -1)
  t.is(utils.subtract(3, 2), 1)
  t.is(utils.subtract(3, 3), 0)
  t.is(utils.subtract(1, 2, 3, 4), -8)
  t.is(utils.subtract(1, 2, 3, 4, 5), -13)
})

test('should calculate the sum of arguments', t => {
  t.is(utils.sum(10, 3), 13)
  t.is(utils.sum(10, 2), 12)
  t.is(utils.sum(10, 1), 11)
  t.is(utils.sum(1, 2, 3, 4), 10)
  t.is(utils.sum(10, -1), 9)
  t.is(utils.sum(10, -2), 8)
  t.is(utils.sum(10, -3), 7)
})

test('should truncate a number at decimal point', t => {
  t.is(utils.truncate(1.234567), 1)
  t.is(utils.truncate(25.198726354), 25)
  t.is(utils.truncate(25.198726354, 1), 25.1)
  t.is(utils.truncate(25.98726354, 2), 25.98)
  t.is(utils.truncate(25.98726354, 3), 25.987)
  t.is(utils.truncate(-25.198726354), -25)
})
