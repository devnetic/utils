import test from 'ava'

import * as utils from './../src'

test('should returns the correct type', t => {
  t.is(utils.getType({}), 'Object')
  t.is(utils.getType(new Object()), 'Object')
  t.is(utils.getType(Object.create(null)), 'Object')
  t.is(utils.getType([]), 'Array')
  t.is(utils.getType(new Array()), 'Array')
  t.is(utils.getType(new Date()), 'Date')
  t.is(utils.getType(String()), 'String')
  t.is(utils.getType(''), 'String')
  t.is(utils.getType('123'), 'String')
  t.is(utils.getType(123), 'Number')
  t.is(utils.getType(123.4), 'Number')
  t.is(utils.getType(true), 'Boolean')
  t.is(utils.getType(false), 'Boolean')
  t.is(utils.getType(BigInt(1)), 'BigInt')
  t.is(utils.getType(() => { }), 'Function')
  t.is(utils.getType(BigInt), 'Function')
  t.is(utils.getType(undefined), 'Undefined')
  t.is(utils.getType(), 'Undefined')
  t.is(utils.getType(null), 'Null')
})

test('should validate if a value is an async function', t => {
  t.true(utils.isAsyncFunction(async () => {}))
  t.true(utils.isAsyncFunction(async function () { }))
  t.false(utils.isAsyncFunction(() => {}))
  t.false(utils.isAsyncFunction(function* () { }))
})

test('should verify equality', t => {
  t.true(utils.isEqual(1, 1))
  t.true(utils.isEqual(1.23, 1.23))
  t.true(utils.isEqual('1', '1'))
  t.true(utils.isEqual(true, true))
  t.true(utils.isEqual(undefined, undefined))
  t.true(utils.isEqual(null, null))
  t.true(utils.isEqual({}, {}))
  t.true(utils.isEqual({ foo: 'bar' }, { foo: 'bar' }))
  t.true(utils.isEqual([], []))
  t.true(utils.isEqual(['foo'], ['foo']))
  t.true(utils.isEqual(['foo', { foo: 'bar' }, 1, 'a'], ['foo', { foo: 'bar' }, 1, 'a']))
  t.false(utils.isEqual(['foo', { foo: 'bar' }, 1, 'a'], ['foo', { foo: 'baz' }, 1, 'a']))
  t.false(utils.isEqual(true, 1))
  t.false(utils.isEqual({ foo: 'bar' }, {}))
})

test('should validate if a value is float', t => {
  t.true(utils.isFloat(123.4))
  t.true(utils.isFloat('123.4'))
  t.true(utils.isFloat(-123.4))
  t.true(utils.isFloat('-123.4'))
  t.true(utils.isFloat(Math.PI))
  t.false(utils.isFloat(0.0))
  t.false(utils.isFloat('123'))
  t.false(utils.isFloat(123))
  t.false(utils.isFloat(-123))
  t.false(utils.isFloat('-123'))
  t.false(utils.isFloat('4e2a'))
  t.false(utils.isFloat('a'))
  t.false(utils.isFloat({}))
  t.false(utils.isFloat(''))
  t.false(utils.isFloat([]))
  t.false(utils.isFloat(null))
  t.false(utils.isFloat(undefined))
  t.false(utils.isFloat(NaN))
})

test('should verify if a value is a function', t => {
  t.true(utils.isFunction(() => { }))
  t.true(utils.isFunction(function* () { }))
  t.true(utils.isFunction(async function () { }))
  t.false(utils.isFunction({}))
})

test('should validate if a values is a generator function', t => {
  t.true(utils.isGeneratorFunction(function* () { }))
  t.false(utils.isGeneratorFunction(() => { }))
})

test('should validate if a value is integer', t => {
  t.true(utils.isInteger(42))
  t.true(utils.isInteger('42'))
  t.true(utils.isInteger(4e2))
  t.true(utils.isInteger('4e2'))
  t.true(utils.isInteger(' 1 '))
  t.true(utils.isInteger(0.0))
  t.false(utils.isInteger(Math.PI))
  t.false(utils.isInteger(''))
  t.false(utils.isInteger(' '))
  t.false(utils.isInteger('a'))
  t.false(utils.isInteger(42.1))
  t.false(utils.isInteger('1a'))
  t.false(utils.isInteger('4e2a'))
  t.false(utils.isInteger({}))
  t.false(utils.isInteger(''))
  t.false(utils.isInteger([]))
  t.false(utils.isInteger(null))
  t.false(utils.isInteger(undefined))
  t.false(utils.isInteger(NaN))
})

test('should validate if an object is json', t => {
  t.true(utils.isJSON({}))
  t.true(utils.isJSON({ foo: 'bar' }))
  t.false(utils.isJSON(true))
  t.false(utils.isJSON(false))
  t.false(utils.isJSON(new Date()))
  t.false(utils.isJSON(''))
  t.false(utils.isJSON(1))
  t.false(utils.isJSON(1.23))
  t.false(utils.isJSON({ foo: BigInt(9007199254740991) }))
})

test('should validate if a value is number', t => {
  t.true(utils.isNumber(123))
  t.true(utils.isNumber(123.4))
  t.true(utils.isNumber(-123))
  t.true(utils.isNumber(Math.PI))
  t.true(utils.isNumber(Number(123)))
  t.true(utils.isNumber(new Number(123)))
  t.true(utils.isNumber(Number.MIN_VALUE))
  t.true(utils.isNumber(Infinity))
  t.false(utils.isNumber('123'))
  t.false(utils.isNumber('-123.4'))
  t.false(utils.isNumber('-123'))
  t.false(utils.isNumber('a'))
  t.false(utils.isNumber({}))
  t.false(utils.isNumber(''))
  t.false(utils.isNumber([]))
})

test('should validate if a value is numeric', t => {
  t.true(utils.isNumeric('123'))
  t.true(utils.isNumeric(123))
  t.true(utils.isNumeric(123.4))
  t.true(utils.isNumeric('-123.4'))
  t.true(utils.isNumeric(-123))
  t.true(utils.isNumeric('-123'))
  t.true(utils.isNumeric(Math.PI))
  t.false(utils.isNumeric('a'))
  t.false(utils.isNumeric({}))
  t.false(utils.isNumeric(''))
  t.false(utils.isNumeric([]))
})
